// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.1
// source: playground/protobuf/shopping/shopping_service.proto

package shopping

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShoppingService_Hello_FullMethodName = "/playground.protobuf.shopping.ShoppingService/Hello"
)

// ShoppingServiceClient is the client API for ShoppingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShoppingServiceClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
}

type shoppingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShoppingServiceClient(cc grpc.ClientConnInterface) ShoppingServiceClient {
	return &shoppingServiceClient{cc}
}

func (c *shoppingServiceClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, ShoppingService_Hello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShoppingServiceServer is the server API for ShoppingService service.
// All implementations must embed UnimplementedShoppingServiceServer
// for forward compatibility
type ShoppingServiceServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	mustEmbedUnimplementedShoppingServiceServer()
}

// UnimplementedShoppingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShoppingServiceServer struct {
}

func (UnimplementedShoppingServiceServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedShoppingServiceServer) mustEmbedUnimplementedShoppingServiceServer() {}

// UnsafeShoppingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShoppingServiceServer will
// result in compilation errors.
type UnsafeShoppingServiceServer interface {
	mustEmbedUnimplementedShoppingServiceServer()
}

func RegisterShoppingServiceServer(s grpc.ServiceRegistrar, srv ShoppingServiceServer) {
	s.RegisterService(&ShoppingService_ServiceDesc, srv)
}

func _ShoppingService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingService_Hello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingServiceServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShoppingService_ServiceDesc is the grpc.ServiceDesc for ShoppingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShoppingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "playground.protobuf.shopping.ShoppingService",
	HandlerType: (*ShoppingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _ShoppingService_Hello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "playground/protobuf/shopping/shopping_service.proto",
}
