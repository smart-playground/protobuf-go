// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.1
// source: playground/protobuf/shopping/shopping_service.proto

package shopping

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShoppingService_Hello_FullMethodName              = "/playground.protobuf.shopping.ShoppingService/Hello"
	ShoppingService_GetCatalogItems_FullMethodName    = "/playground.protobuf.shopping.ShoppingService/GetCatalogItems"
	ShoppingService_AddCatalogItem_FullMethodName     = "/playground.protobuf.shopping.ShoppingService/AddCatalogItem"
	ShoppingService_UpdateCatalogItem_FullMethodName  = "/playground.protobuf.shopping.ShoppingService/UpdateCatalogItem"
	ShoppingService_DeleteCatalogItems_FullMethodName = "/playground.protobuf.shopping.ShoppingService/DeleteCatalogItems"
	ShoppingService_CountCatalogItems_FullMethodName  = "/playground.protobuf.shopping.ShoppingService/CountCatalogItems"
)

// ShoppingServiceClient is the client API for ShoppingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShoppingServiceClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	GetCatalogItems(ctx context.Context, in *GetCatalogItemsRequest, opts ...grpc.CallOption) (*GetCatalogItemsResponse, error)
	AddCatalogItem(ctx context.Context, in *AddCatalogItemRequest, opts ...grpc.CallOption) (*AddCatalogItemResponse, error)
	UpdateCatalogItem(ctx context.Context, in *UpdateCatalogItemRequest, opts ...grpc.CallOption) (*UpdateCatalogItemResponse, error)
	DeleteCatalogItems(ctx context.Context, in *DeleteCatalogItemsRequest, opts ...grpc.CallOption) (*DeleteCatalogItemsResponse, error)
	CountCatalogItems(ctx context.Context, in *CountCatalogItemsRequest, opts ...grpc.CallOption) (*CountCatalogItemsResponse, error)
}

type shoppingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShoppingServiceClient(cc grpc.ClientConnInterface) ShoppingServiceClient {
	return &shoppingServiceClient{cc}
}

func (c *shoppingServiceClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, ShoppingService_Hello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingServiceClient) GetCatalogItems(ctx context.Context, in *GetCatalogItemsRequest, opts ...grpc.CallOption) (*GetCatalogItemsResponse, error) {
	out := new(GetCatalogItemsResponse)
	err := c.cc.Invoke(ctx, ShoppingService_GetCatalogItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingServiceClient) AddCatalogItem(ctx context.Context, in *AddCatalogItemRequest, opts ...grpc.CallOption) (*AddCatalogItemResponse, error) {
	out := new(AddCatalogItemResponse)
	err := c.cc.Invoke(ctx, ShoppingService_AddCatalogItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingServiceClient) UpdateCatalogItem(ctx context.Context, in *UpdateCatalogItemRequest, opts ...grpc.CallOption) (*UpdateCatalogItemResponse, error) {
	out := new(UpdateCatalogItemResponse)
	err := c.cc.Invoke(ctx, ShoppingService_UpdateCatalogItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingServiceClient) DeleteCatalogItems(ctx context.Context, in *DeleteCatalogItemsRequest, opts ...grpc.CallOption) (*DeleteCatalogItemsResponse, error) {
	out := new(DeleteCatalogItemsResponse)
	err := c.cc.Invoke(ctx, ShoppingService_DeleteCatalogItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingServiceClient) CountCatalogItems(ctx context.Context, in *CountCatalogItemsRequest, opts ...grpc.CallOption) (*CountCatalogItemsResponse, error) {
	out := new(CountCatalogItemsResponse)
	err := c.cc.Invoke(ctx, ShoppingService_CountCatalogItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShoppingServiceServer is the server API for ShoppingService service.
// All implementations must embed UnimplementedShoppingServiceServer
// for forward compatibility
type ShoppingServiceServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	GetCatalogItems(context.Context, *GetCatalogItemsRequest) (*GetCatalogItemsResponse, error)
	AddCatalogItem(context.Context, *AddCatalogItemRequest) (*AddCatalogItemResponse, error)
	UpdateCatalogItem(context.Context, *UpdateCatalogItemRequest) (*UpdateCatalogItemResponse, error)
	DeleteCatalogItems(context.Context, *DeleteCatalogItemsRequest) (*DeleteCatalogItemsResponse, error)
	CountCatalogItems(context.Context, *CountCatalogItemsRequest) (*CountCatalogItemsResponse, error)
	mustEmbedUnimplementedShoppingServiceServer()
}

// UnimplementedShoppingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShoppingServiceServer struct {
}

func (UnimplementedShoppingServiceServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedShoppingServiceServer) GetCatalogItems(context.Context, *GetCatalogItemsRequest) (*GetCatalogItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCatalogItems not implemented")
}
func (UnimplementedShoppingServiceServer) AddCatalogItem(context.Context, *AddCatalogItemRequest) (*AddCatalogItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCatalogItem not implemented")
}
func (UnimplementedShoppingServiceServer) UpdateCatalogItem(context.Context, *UpdateCatalogItemRequest) (*UpdateCatalogItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCatalogItem not implemented")
}
func (UnimplementedShoppingServiceServer) DeleteCatalogItems(context.Context, *DeleteCatalogItemsRequest) (*DeleteCatalogItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCatalogItems not implemented")
}
func (UnimplementedShoppingServiceServer) CountCatalogItems(context.Context, *CountCatalogItemsRequest) (*CountCatalogItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCatalogItems not implemented")
}
func (UnimplementedShoppingServiceServer) mustEmbedUnimplementedShoppingServiceServer() {}

// UnsafeShoppingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShoppingServiceServer will
// result in compilation errors.
type UnsafeShoppingServiceServer interface {
	mustEmbedUnimplementedShoppingServiceServer()
}

func RegisterShoppingServiceServer(s grpc.ServiceRegistrar, srv ShoppingServiceServer) {
	s.RegisterService(&ShoppingService_ServiceDesc, srv)
}

func _ShoppingService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingService_Hello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingServiceServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingService_GetCatalogItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCatalogItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingServiceServer).GetCatalogItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingService_GetCatalogItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingServiceServer).GetCatalogItems(ctx, req.(*GetCatalogItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingService_AddCatalogItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCatalogItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingServiceServer).AddCatalogItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingService_AddCatalogItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingServiceServer).AddCatalogItem(ctx, req.(*AddCatalogItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingService_UpdateCatalogItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCatalogItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingServiceServer).UpdateCatalogItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingService_UpdateCatalogItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingServiceServer).UpdateCatalogItem(ctx, req.(*UpdateCatalogItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingService_DeleteCatalogItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCatalogItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingServiceServer).DeleteCatalogItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingService_DeleteCatalogItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingServiceServer).DeleteCatalogItems(ctx, req.(*DeleteCatalogItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingService_CountCatalogItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountCatalogItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingServiceServer).CountCatalogItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingService_CountCatalogItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingServiceServer).CountCatalogItems(ctx, req.(*CountCatalogItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShoppingService_ServiceDesc is the grpc.ServiceDesc for ShoppingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShoppingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "playground.protobuf.shopping.ShoppingService",
	HandlerType: (*ShoppingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _ShoppingService_Hello_Handler,
		},
		{
			MethodName: "GetCatalogItems",
			Handler:    _ShoppingService_GetCatalogItems_Handler,
		},
		{
			MethodName: "AddCatalogItem",
			Handler:    _ShoppingService_AddCatalogItem_Handler,
		},
		{
			MethodName: "UpdateCatalogItem",
			Handler:    _ShoppingService_UpdateCatalogItem_Handler,
		},
		{
			MethodName: "DeleteCatalogItems",
			Handler:    _ShoppingService_DeleteCatalogItems_Handler,
		},
		{
			MethodName: "CountCatalogItems",
			Handler:    _ShoppingService_CountCatalogItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "playground/protobuf/shopping/shopping_service.proto",
}
