// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.1
// source: playground/protobuf/notifications/notifications_service.proto

package notifications

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NotificationsService_GetNotifications_FullMethodName    = "/playground.protobuf.notifications.NotificationsService/GetNotifications"
	NotificationsService_AddNotification_FullMethodName     = "/playground.protobuf.notifications.NotificationsService/AddNotification"
	NotificationsService_MarkNotification_FullMethodName    = "/playground.protobuf.notifications.NotificationsService/MarkNotification"
	NotificationsService_DeleteNotifications_FullMethodName = "/playground.protobuf.notifications.NotificationsService/DeleteNotifications"
	NotificationsService_CountNotifications_FullMethodName  = "/playground.protobuf.notifications.NotificationsService/CountNotifications"
)

// NotificationsServiceClient is the client API for NotificationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationsServiceClient interface {
	GetNotifications(ctx context.Context, in *GetNotificationsRequest, opts ...grpc.CallOption) (*GetNotificationsResponse, error)
	AddNotification(ctx context.Context, in *AddNotificationRequest, opts ...grpc.CallOption) (*AddNotificationResponse, error)
	MarkNotification(ctx context.Context, in *MarkNotificationReadnessRequest, opts ...grpc.CallOption) (*MarkNotificationReadnessResponse, error)
	DeleteNotifications(ctx context.Context, in *DeleteNotificationsRequest, opts ...grpc.CallOption) (*DeleteNotificationsResponse, error)
	CountNotifications(ctx context.Context, in *CountNotificationsRequest, opts ...grpc.CallOption) (*CountNotificationsResponse, error)
}

type notificationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationsServiceClient(cc grpc.ClientConnInterface) NotificationsServiceClient {
	return &notificationsServiceClient{cc}
}

func (c *notificationsServiceClient) GetNotifications(ctx context.Context, in *GetNotificationsRequest, opts ...grpc.CallOption) (*GetNotificationsResponse, error) {
	out := new(GetNotificationsResponse)
	err := c.cc.Invoke(ctx, NotificationsService_GetNotifications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsServiceClient) AddNotification(ctx context.Context, in *AddNotificationRequest, opts ...grpc.CallOption) (*AddNotificationResponse, error) {
	out := new(AddNotificationResponse)
	err := c.cc.Invoke(ctx, NotificationsService_AddNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsServiceClient) MarkNotification(ctx context.Context, in *MarkNotificationReadnessRequest, opts ...grpc.CallOption) (*MarkNotificationReadnessResponse, error) {
	out := new(MarkNotificationReadnessResponse)
	err := c.cc.Invoke(ctx, NotificationsService_MarkNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsServiceClient) DeleteNotifications(ctx context.Context, in *DeleteNotificationsRequest, opts ...grpc.CallOption) (*DeleteNotificationsResponse, error) {
	out := new(DeleteNotificationsResponse)
	err := c.cc.Invoke(ctx, NotificationsService_DeleteNotifications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsServiceClient) CountNotifications(ctx context.Context, in *CountNotificationsRequest, opts ...grpc.CallOption) (*CountNotificationsResponse, error) {
	out := new(CountNotificationsResponse)
	err := c.cc.Invoke(ctx, NotificationsService_CountNotifications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationsServiceServer is the server API for NotificationsService service.
// All implementations must embed UnimplementedNotificationsServiceServer
// for forward compatibility
type NotificationsServiceServer interface {
	GetNotifications(context.Context, *GetNotificationsRequest) (*GetNotificationsResponse, error)
	AddNotification(context.Context, *AddNotificationRequest) (*AddNotificationResponse, error)
	MarkNotification(context.Context, *MarkNotificationReadnessRequest) (*MarkNotificationReadnessResponse, error)
	DeleteNotifications(context.Context, *DeleteNotificationsRequest) (*DeleteNotificationsResponse, error)
	CountNotifications(context.Context, *CountNotificationsRequest) (*CountNotificationsResponse, error)
	mustEmbedUnimplementedNotificationsServiceServer()
}

// UnimplementedNotificationsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationsServiceServer struct {
}

func (UnimplementedNotificationsServiceServer) GetNotifications(context.Context, *GetNotificationsRequest) (*GetNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifications not implemented")
}
func (UnimplementedNotificationsServiceServer) AddNotification(context.Context, *AddNotificationRequest) (*AddNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNotification not implemented")
}
func (UnimplementedNotificationsServiceServer) MarkNotification(context.Context, *MarkNotificationReadnessRequest) (*MarkNotificationReadnessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkNotification not implemented")
}
func (UnimplementedNotificationsServiceServer) DeleteNotifications(context.Context, *DeleteNotificationsRequest) (*DeleteNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotifications not implemented")
}
func (UnimplementedNotificationsServiceServer) CountNotifications(context.Context, *CountNotificationsRequest) (*CountNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountNotifications not implemented")
}
func (UnimplementedNotificationsServiceServer) mustEmbedUnimplementedNotificationsServiceServer() {}

// UnsafeNotificationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationsServiceServer will
// result in compilation errors.
type UnsafeNotificationsServiceServer interface {
	mustEmbedUnimplementedNotificationsServiceServer()
}

func RegisterNotificationsServiceServer(s grpc.ServiceRegistrar, srv NotificationsServiceServer) {
	s.RegisterService(&NotificationsService_ServiceDesc, srv)
}

func _NotificationsService_GetNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).GetNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationsService_GetNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).GetNotifications(ctx, req.(*GetNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationsService_AddNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).AddNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationsService_AddNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).AddNotification(ctx, req.(*AddNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationsService_MarkNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkNotificationReadnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).MarkNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationsService_MarkNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).MarkNotification(ctx, req.(*MarkNotificationReadnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationsService_DeleteNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).DeleteNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationsService_DeleteNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).DeleteNotifications(ctx, req.(*DeleteNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationsService_CountNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).CountNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationsService_CountNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).CountNotifications(ctx, req.(*CountNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationsService_ServiceDesc is the grpc.ServiceDesc for NotificationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "playground.protobuf.notifications.NotificationsService",
	HandlerType: (*NotificationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNotifications",
			Handler:    _NotificationsService_GetNotifications_Handler,
		},
		{
			MethodName: "AddNotification",
			Handler:    _NotificationsService_AddNotification_Handler,
		},
		{
			MethodName: "MarkNotification",
			Handler:    _NotificationsService_MarkNotification_Handler,
		},
		{
			MethodName: "DeleteNotifications",
			Handler:    _NotificationsService_DeleteNotifications_Handler,
		},
		{
			MethodName: "CountNotifications",
			Handler:    _NotificationsService_CountNotifications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "playground/protobuf/notifications/notifications_service.proto",
}
