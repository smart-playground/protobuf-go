// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.1
// source: playground/protobuf/carts/carts_service.proto

package carts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CartsService_Hello_FullMethodName          = "/playground.protobuf.carts.CartsService/Hello"
	CartsService_GetCarts_FullMethodName       = "/playground.protobuf.carts.CartsService/GetCarts"
	CartsService_AddCart_FullMethodName        = "/playground.protobuf.carts.CartsService/AddCart"
	CartsService_UpdateCart_FullMethodName     = "/playground.protobuf.carts.CartsService/UpdateCart"
	CartsService_DeleteCarts_FullMethodName    = "/playground.protobuf.carts.CartsService/DeleteCarts"
	CartsService_CountCarts_FullMethodName     = "/playground.protobuf.carts.CartsService/CountCarts"
	CartsService_AddItemsToCard_FullMethodName = "/playground.protobuf.carts.CartsService/AddItemsToCard"
)

// CartsServiceClient is the client API for CartsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartsServiceClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	GetCarts(ctx context.Context, in *GetCartsRequest, opts ...grpc.CallOption) (*GetCartsResponse, error)
	AddCart(ctx context.Context, in *AddCartRequest, opts ...grpc.CallOption) (*AddCartResponse, error)
	UpdateCart(ctx context.Context, in *UpdateCartRequest, opts ...grpc.CallOption) (*UpdateCartResponse, error)
	DeleteCarts(ctx context.Context, in *DeleteCartsRequest, opts ...grpc.CallOption) (*DeleteCartsResponse, error)
	CountCarts(ctx context.Context, in *CountCartsRequest, opts ...grpc.CallOption) (*CountCartsResponse, error)
	AddItemsToCard(ctx context.Context, in *AddItemsRequest, opts ...grpc.CallOption) (*AddItemsResponse, error)
}

type cartsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCartsServiceClient(cc grpc.ClientConnInterface) CartsServiceClient {
	return &cartsServiceClient{cc}
}

func (c *cartsServiceClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, CartsService_Hello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartsServiceClient) GetCarts(ctx context.Context, in *GetCartsRequest, opts ...grpc.CallOption) (*GetCartsResponse, error) {
	out := new(GetCartsResponse)
	err := c.cc.Invoke(ctx, CartsService_GetCarts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartsServiceClient) AddCart(ctx context.Context, in *AddCartRequest, opts ...grpc.CallOption) (*AddCartResponse, error) {
	out := new(AddCartResponse)
	err := c.cc.Invoke(ctx, CartsService_AddCart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartsServiceClient) UpdateCart(ctx context.Context, in *UpdateCartRequest, opts ...grpc.CallOption) (*UpdateCartResponse, error) {
	out := new(UpdateCartResponse)
	err := c.cc.Invoke(ctx, CartsService_UpdateCart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartsServiceClient) DeleteCarts(ctx context.Context, in *DeleteCartsRequest, opts ...grpc.CallOption) (*DeleteCartsResponse, error) {
	out := new(DeleteCartsResponse)
	err := c.cc.Invoke(ctx, CartsService_DeleteCarts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartsServiceClient) CountCarts(ctx context.Context, in *CountCartsRequest, opts ...grpc.CallOption) (*CountCartsResponse, error) {
	out := new(CountCartsResponse)
	err := c.cc.Invoke(ctx, CartsService_CountCarts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartsServiceClient) AddItemsToCard(ctx context.Context, in *AddItemsRequest, opts ...grpc.CallOption) (*AddItemsResponse, error) {
	out := new(AddItemsResponse)
	err := c.cc.Invoke(ctx, CartsService_AddItemsToCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartsServiceServer is the server API for CartsService service.
// All implementations must embed UnimplementedCartsServiceServer
// for forward compatibility
type CartsServiceServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	GetCarts(context.Context, *GetCartsRequest) (*GetCartsResponse, error)
	AddCart(context.Context, *AddCartRequest) (*AddCartResponse, error)
	UpdateCart(context.Context, *UpdateCartRequest) (*UpdateCartResponse, error)
	DeleteCarts(context.Context, *DeleteCartsRequest) (*DeleteCartsResponse, error)
	CountCarts(context.Context, *CountCartsRequest) (*CountCartsResponse, error)
	AddItemsToCard(context.Context, *AddItemsRequest) (*AddItemsResponse, error)
	mustEmbedUnimplementedCartsServiceServer()
}

// UnimplementedCartsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCartsServiceServer struct {
}

func (UnimplementedCartsServiceServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedCartsServiceServer) GetCarts(context.Context, *GetCartsRequest) (*GetCartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarts not implemented")
}
func (UnimplementedCartsServiceServer) AddCart(context.Context, *AddCartRequest) (*AddCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCart not implemented")
}
func (UnimplementedCartsServiceServer) UpdateCart(context.Context, *UpdateCartRequest) (*UpdateCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCart not implemented")
}
func (UnimplementedCartsServiceServer) DeleteCarts(context.Context, *DeleteCartsRequest) (*DeleteCartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCarts not implemented")
}
func (UnimplementedCartsServiceServer) CountCarts(context.Context, *CountCartsRequest) (*CountCartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCarts not implemented")
}
func (UnimplementedCartsServiceServer) AddItemsToCard(context.Context, *AddItemsRequest) (*AddItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItemsToCard not implemented")
}
func (UnimplementedCartsServiceServer) mustEmbedUnimplementedCartsServiceServer() {}

// UnsafeCartsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartsServiceServer will
// result in compilation errors.
type UnsafeCartsServiceServer interface {
	mustEmbedUnimplementedCartsServiceServer()
}

func RegisterCartsServiceServer(s grpc.ServiceRegistrar, srv CartsServiceServer) {
	s.RegisterService(&CartsService_ServiceDesc, srv)
}

func _CartsService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartsServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartsService_Hello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartsServiceServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartsService_GetCarts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartsServiceServer).GetCarts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartsService_GetCarts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartsServiceServer).GetCarts(ctx, req.(*GetCartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartsService_AddCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartsServiceServer).AddCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartsService_AddCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartsServiceServer).AddCart(ctx, req.(*AddCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartsService_UpdateCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartsServiceServer).UpdateCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartsService_UpdateCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartsServiceServer).UpdateCart(ctx, req.(*UpdateCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartsService_DeleteCarts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartsServiceServer).DeleteCarts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartsService_DeleteCarts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartsServiceServer).DeleteCarts(ctx, req.(*DeleteCartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartsService_CountCarts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountCartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartsServiceServer).CountCarts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartsService_CountCarts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartsServiceServer).CountCarts(ctx, req.(*CountCartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartsService_AddItemsToCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartsServiceServer).AddItemsToCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartsService_AddItemsToCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartsServiceServer).AddItemsToCard(ctx, req.(*AddItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CartsService_ServiceDesc is the grpc.ServiceDesc for CartsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CartsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "playground.protobuf.carts.CartsService",
	HandlerType: (*CartsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _CartsService_Hello_Handler,
		},
		{
			MethodName: "GetCarts",
			Handler:    _CartsService_GetCarts_Handler,
		},
		{
			MethodName: "AddCart",
			Handler:    _CartsService_AddCart_Handler,
		},
		{
			MethodName: "UpdateCart",
			Handler:    _CartsService_UpdateCart_Handler,
		},
		{
			MethodName: "DeleteCarts",
			Handler:    _CartsService_DeleteCarts_Handler,
		},
		{
			MethodName: "CountCarts",
			Handler:    _CartsService_CountCarts_Handler,
		},
		{
			MethodName: "AddItemsToCard",
			Handler:    _CartsService_AddItemsToCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "playground/protobuf/carts/carts_service.proto",
}
